# blog_src/scripts/writer/brandimg_injector.py
# ==========================================================
# üñº  Brand Image Injector (Version 3 ‚Äî smart section placement)
# ----------------------------------------------------------
# –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤–ª—è–µ—Ç –±—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–µ–∫—Ü–∏–π:
#   ‚Ä¢ –ø–µ—Ä–≤—É—é ‚Äî –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏;
#   ‚Ä¢ –≤—Ç–æ—Ä—É—é ‚Äî –≤ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ—Ç—å–µ–π —Å–µ–∫—Ü–∏–∏;
# ALT —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (# ...) –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
# ==========================================================

import re
import json
from pathlib import Path

DATA_FILE = Path("blog_src/data/brand_images.json")
STATE_FILE = Path("blog_src/data/state.json")


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def _load_brand_images() -> list[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ data/brand_images.json."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        files = data.get("files", [])
        if not isinstance(files, list):
            raise ValueError("brand_images.json: 'files' must be a list")
        allowed_exts = (".webp", ".jpg", ".jpeg", ".svg", ".png")
        return [f for f in files if f.lower().endswith(allowed_exts)]
    except Exception as e:
        print(f"‚ö†Ô∏è Could not load brand_images.json: {e}")
        return []


def _load_state() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç state.json –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω."""
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}


def _save_state(state: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç state.json."""
    try:
        STATE_FILE.parent.mkdir(parents=True, exist_ok=True)
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è Could not save state.json: {e}")


def _get_next_image() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Ü–∏–∫–ª–∏—á–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—è –∏–Ω–¥–µ–∫—Å –≤ state.json."""
    files = _load_brand_images()
    if not files:
        return "nailak-cover-16x9.webp"

    state = _load_state()
    idx = state.get("brandimg_index", 0)

    chosen = files[idx % len(files)]
    state["brandimg_index"] = (idx + 1) % len(files)

    used = state.get("brandimg_used", [])
    used.append(chosen)
    state["brandimg_used"] = used[-20:]

    _save_state(state)
    return chosen


def _derive_alt(markdown_text: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç ALT –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞ –∏–ª–∏ fallback."""
    m = re.search(r"^#\s+(.+)$", markdown_text, re.MULTILINE)
    if m:
        title = m.group(1).strip()
        return f"{title} ‚Äî Nailak Cuticle & Nail Oil"
    return "Nailak Cuticle & Nail Oil ‚Äî natural care and hydration"


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

def inject_brand_images(markdown_text: str) -> str:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç <figure><img> –±–ª–æ–∫–∏:
      ‚Ä¢ –ø–µ—Ä–≤—É—é ‚Äî –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏;
      ‚Ä¢ –≤—Ç–æ—Ä—É—é ‚Äî –≤ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ—Ç—å–µ–π —Å–µ–∫—Ü–∏–∏.
    """

    if not markdown_text:
        return markdown_text

    alt_text = _derive_alt(markdown_text)

    # --- –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ H2, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–π ---
    h2_matches = list(re.finditer(r"(?m)^##\s", markdown_text))
    insert_positions: list[int] = []

    # === 1Ô∏è‚É£ –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ ‚Äî –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏ ===
    first_anchor = 0
    insert_positions.append(first_anchor)

    # === 2Ô∏è‚É£ –í—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ ‚Äî –Ω–∞—á–∞–ª–æ —Ç—Ä–µ—Ç—å–µ–π —Å–µ–∫—Ü–∏–∏ ===
    second_anchor = None
    if len(h2_matches) >= 3:
        # –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –≤ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ—Ç—å–µ–π —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
        second_anchor = h2_matches[2].start()
    elif len(h2_matches) > 0:
        # –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å–µ–∫—Ü–∏–π ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        second_anchor = h2_matches[-1].start()
    else:
        # fallback ‚Äî –±–ª–∏–∂–µ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_len = len(markdown_text)
        mid_pos = text_len // 2
        newline_mid = markdown_text.find("\n", mid_pos)
        second_anchor = newline_mid if newline_mid != -1 else mid_pos

    insert_positions.append(second_anchor)

    # --- –≤—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–æ–≤ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π —Ä—è–¥–æ–º) ---
    for pos in sorted(set(filter(lambda x: x is not None, insert_positions)), reverse=True):
        chosen_file = _get_next_image()
        snippet = (
            f'\n\n<figure class="brand-image">'
            f'\n  <img src="/images/brand/{chosen_file}" '
            f'alt="{alt_text}" loading="lazy" decoding="async">'
            f'\n</figure>\n\n'
        )

        window = markdown_text[max(0, pos - 64): min(len(markdown_text), pos + 64)]
        if "<figure" in window:
            continue

        markdown_text = markdown_text[:pos] + snippet + markdown_text[pos:]

    return markdown_text
