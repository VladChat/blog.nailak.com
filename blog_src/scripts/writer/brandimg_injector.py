# blog_src/scripts/writer/brandimg_injector.py
import re
import json
import random
from pathlib import Path

DATA_FILE = Path("blog_src/data/brand_images.json")

def _load_brand_images() -> list[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ data/brand_images.json."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        files = data.get("files", [])
        if not isinstance(files, list):
            raise ValueError("brand_images.json: 'files' must be a list")
        return files
    except Exception as e:
        print(f"‚ö†Ô∏è Could not load brand_images.json: {e}")
        return []

def _pick_random_file() -> str:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º webp/svg/jpg."""
    files = _load_brand_images()
    allowed_exts = {".webp", ".jpg", ".jpeg", ".svg", ".png"}
    valid = [f for f in files if any(f.lower().endswith(ext) for ext in allowed_exts)]
    if not valid:
        return "nailak-cover-16x9.webp"  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    return random.choice(valid)

def inject_brand_images(markdown_text: str) -> str:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç {{< brandimg file="..." >}}:
      ‚Ä¢ –≤ –ö–û–ù–ï–¶ 1-–π —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ 2-–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ##),
      ‚Ä¢ –≤ –ö–û–ù–ï–¶ 3-–π —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ 4-–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ##).

    –ö–∞–∂–¥–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç –°–í–û–ô —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª.
    """
    if not markdown_text:
        return markdown_text

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ H2
    h2_iter = list(re.finditer(r'^##\s+.*$', markdown_text, re.MULTILINE))
    insert_positions = []

    def before_line_start(idx: int) -> int:
        prev_nl = markdown_text.rfind('\n', 0, idx)
        return 0 if prev_nl == -1 else prev_nl + 1

    def after_line_end(idx: int) -> int:
        nl = markdown_text.find('\n', idx)
        return len(markdown_text) if nl == -1 else nl + 1

    # --- –¢–æ—á–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ ‚Ññ1: –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º H2) ---
    if len(h2_iter) >= 2:
        insert_positions.append(before_line_start(h2_iter[1].start()))
    elif len(h2_iter) == 1:
        insert_positions.append(len(markdown_text))

    # --- –¢–æ—á–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ ‚Ññ2: –∫–æ–Ω–µ—Ü —Ç—Ä–µ—Ç—å–µ–π —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–¥ —á–µ—Ç–≤—ë—Ä—Ç—ã–º H2) ---
    if len(h2_iter) >= 4:
        insert_positions.append(before_line_start(h2_iter[3].start()))
    elif len(h2_iter) >= 3:
        insert_positions.append(len(markdown_text))

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–º–µ—â–∞–ª–∏—Å—å
    for pos in sorted(insert_positions, reverse=True):
        chosen_file = _pick_random_file()  # üÜï –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –≤—Å—Ç–∞–≤–∫–∏
        snippet = f'\n\n{{{{< brandimg file="{chosen_file}" >}}}}\n\n'

        window = markdown_text[max(0, pos - 64): min(len(markdown_text), pos + 64)]
        if "{{< brandimg" in window:
            continue
        markdown_text = markdown_text[:pos] + snippet + markdown_text[pos:]

    return markdown_text
